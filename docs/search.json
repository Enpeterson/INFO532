[{"path":"index.html","id":"info-532-advanced-geographic-information-systems-fall-2023","chapter":"INFO 532: Advanced Geographic Information Systems Fall 2023","heading":"INFO 532: Advanced Geographic Information Systems Fall 2023","text":"Authors: Alex Edwards & Emily Peterson\nFall 2023This Advanced GIS Fall 2023 class project-based exploration advanced topics GIS geospatial technology, focus spatial modeling, advanced spatial analysis geoprocessing, spatial data manipulation, geocomputation. information course expectations, assignments, grading, schedule, please review course syllabus listed Canvas. use e-book lectures, -class activities. course content housed book reference.Advanced GIS analysis methods covered course include: (1) spatial data wrangling, (2) point data analysis, (3) area data analysis, (4) raster data, (5) spatial interpolation, (6) spatial autocorrelation.two sections class (-person asynchronous). Synchronous sessions meets Mondays Wednesdays 10:00-11:50 GCR P45. -person session classes broken 2 components. first half class lecture, second half class used “lab-time” work projects. Students enrolled asynchronous welcome join -person class can extra help needed.","code":""},{"path":"index.html","id":"about-the-class","chapter":"INFO 532: Advanced Geographic Information Systems Fall 2023","heading":"About the class","text":"","code":""},{"path":"index.html","id":"prerequisites","chapter":"INFO 532: Advanced Geographic Information Systems Fall 2023","heading":"Prerequisites","text":"INFO 530 completion. Many concepts learned INFO 530 carry forward class.INFO 530 completion. Many concepts learned INFO 530 carry forward class.R RStudio installation. use R programming language course.R RStudio installation. use R programming language course.required may helpful:\nBrunsdon, C. (2018). introduction r spatial analysis mapping (2nd edition). SAGE Publications.\nComber Brunson (2021) Geographical Data Science Spatial Data Analysis: Introduction R. Sage. London.\nrequired may helpful:Brunsdon, C. (2018). introduction r spatial analysis mapping (2nd edition). SAGE Publications.Comber Brunson (2021) Geographical Data Science Spatial Data Analysis: Introduction R. Sage. London.","code":""},{"path":"index.html","id":"grading","chapter":"INFO 532: Advanced Geographic Information Systems Fall 2023","heading":"Grading","text":"4 labs: 40% (one lab per week)1 Case Study report (presentation -person class): 50%Participation class activities, discussion boards, etc. (required): 10%","code":""},{"path":"index.html","id":"labs","chapter":"INFO 532: Advanced Geographic Information Systems Fall 2023","heading":"Labs","text":"Use RStudio turn Markdown file.Post HW CanvassLabs due Wednesday 10 .Important Start filename NAME! PLEASE PLEASE PLEASE PLEASEThis project-based class. br assigned case-study interest, contains point area data. lab consist taking learned topics discussed module applying project application. define exact output submitted lab.","code":""},{"path":"index.html","id":"how-do-i-get-help","chapter":"INFO 532: Advanced Geographic Information Systems Fall 2023","heading":"How do I get help?","text":"Direct emails can get lost send messages Canvas.Post questions discussion board labs. Others may question.similar question one posted, please tag post.know answer posted question, please feel free post response.Links can especially helpful students, TAs, instructor.BEST check posts/emails morning evening office hours.Important: wait last minute. TA instructor may available answer questions morning labs due.Please send email schedule time office hours.Real life important. trouble course, need added flexibility due real life, feel free come , accomodate best can.Instructor E-mail: person instructor (emily.nancy.peterson@emory.edu), Asynchronous instructor (alex.edwards@emory.edu)TA E-mail: (amy.moore@emory.edu), alex add TAs","code":""},{"path":"index.html","id":"resources-for-students","chapter":"INFO 532: Advanced Geographic Information Systems Fall 2023","heading":"Resources for students","text":"RSPH Academic ResourcesEnglish Language Support ProgramEmory Writing CenterFor MS students RSPH\n(https://www.sph.emory.edu/rollins-life/resources/international-students/)\n(https://www.sph.emory.edu/rollins-life/resources/academic-writing-resources/index.html)\n(https://www.sph.emory.edu/rollins-life/resources/international-students/)(https://www.sph.emory.edu/rollins-life/resources/academic-writing-resources/index.html)","code":""},{"path":"index.html","id":"diversity-and-inclusion-statement","chapter":"INFO 532: Advanced Geographic Information Systems Fall 2023","heading":"Diversity and Inclusion Statement","text":"core, course embraces multiplicity voices perspectives. respect people backgrounds recognize differences among , including racial ethnic identities, religious practices, gender expressions. Please let know name like called gender pronouns.come different backgrounds interests. course, essential inclusive come learn. can learn one another, safe space share views educate one another accepting inclusive language.Please use NAMECOACH Canvas help learn say name, please bare get easily. terrible memory.","code":""},{"path":"index.html","id":"using-this-notebook","chapter":"INFO 532: Advanced Geographic Information Systems Fall 2023","heading":"Using this notebook","text":"notebook contains lectures class. lectures recorded uploaded Canvas module. end module lab assignment included.Important: notebook revised edited throughout semester depending pace class additional notes may found helpful.\neBook licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.","code":""},{"path":"introduction-to-gis.html","id":"introduction-to-gis","chapter":"Module 1 Introduction to GIS","heading":"Module 1 Introduction to GIS","text":"","code":""},{"path":"introduction-to-gis.html","id":"what-is-gis","chapter":"Module 1 Introduction to GIS","heading":"1.1 What is GIS?","text":"Geographic Information System multi-component environment used create, manage, visualize, analyze data spatial counterpart.Geographic Information System multi-component environment used create, manage, visualize, analyze data spatial counterpart.GIS lies intersection spatial analysis (inference) studies biological population patterns (epidemiology, economics, etc.).GIS lies intersection spatial analysis (inference) studies biological population patterns (epidemiology, economics, etc.).\nFIGURE 1.1: Visualization intersection GIS, spatial analysis, areas research\nGIS, aim answer questions spatial patterns observed real world observed data. ?\nStart real-world question.\nCollect data records observations related variables interest.\nFind methods used answer real-world question.\nBuild analysis findings spatial lens.\nStart real-world question.Collect data records observations related variables interest.Find methods used answer real-world question.Build analysis findings spatial lens.","code":""},{"path":"introduction-to-gis.html","id":"how-is-gis-used","chapter":"Module 1 Introduction to GIS","heading":"1.2 How is GIS used?","text":"data geographic context therefore can linked location data. Whether real estate transactions, crime records, health data, almost always occur place spatial characteristics. GIS analysis consists combining layers multiple data sets produce comprehensive picture underlying spatial process. layer corresponds spatial layer information. example, can combine layers geographic state boundaries, roads, coordinate (point) locations cases infections hospitals create comprehensive map clusters infection cases hospitals across states distance hospitals.\nFIGURE 1.2: GIS data layers\nThought boxBased research done projects class, projects done applied GIS? questions answer?","code":""},{"path":"introduction-to-gis.html","id":"gis-in-action","chapter":"Module 1 Introduction to GIS","heading":"1.3 GIS in Action","text":"\nFIGURE 1.3: Map opioid mortality county US\n\nFIGURE 1.4: Heat map Heat index across US\n\nFIGURE 1.5: Mapped locations methadone clinics US\nresearch, try look data spatial lens. example, point plot mapped migration patterns humpback whales Washington State. points interval measures satellite locations. can use data inform understanding migration patterns? second plot chloropleth total population sizes county across 3 different data sources. Looking different data sources report different values can give us sense large difference location.","code":""},{"path":"introduction-to-gis.html","id":"gis-feature-representation","chapter":"Module 1 Introduction to GIS","heading":"1.4 GIS Feature Representation","text":"work GIS environment, real world observations(objects events can recorded 2D 3D space) need reduced spatial entities. spatial entities can represented GIS vector raster. representation river vector raster formats.","code":""},{"path":"introduction-to-gis.html","id":"vector","chapter":"Module 1 Introduction to GIS","heading":"1.4.1 Vector","text":"Vector features can decomposed three different geometric types: points, lines, polygons.point composed one coordinate pair representing specific location coordinate system. Points basic geometric type length area. Points map represented using symbols area shape (e.g., circle, square etc.)line composed sequence two coordinate pairs called vertices. vertex defined coordinate pairs, just like point, differentiates vertex point isthe explicitly defined relationship neighboring vertices. Features like roads rivers represented using polylines GIS. Spatial polyline defined euclidean distance point b. Line data can refer roads, streets, flight trajectories, anything consists path start point end point.polygon composed three line segments whose starting ending coordinate pairs . Sometimes see word lattice area used lieu polygon. Polygons represent length (.e., perimeter area) area. also embody idea inside outside, .e., area polygon encloses explicitly defined GIS environment.","code":""},{"path":"introduction-to-gis.html","id":"raster","chapter":"Module 1 Introduction to GIS","heading":"1.4.2 Raster","text":"raster data model uses array cells pixels represent real-world objects. Raster datasets commonly used representing managing imagery, surface temperatures, digital elevation models, numerous entities.raster can thought special case area object area divided regular grid cells. regularly spaced array marked points may better analogy since rasters stored array values cell defined single coordinate pair inside GIS environments.Implicit raster data model value associated cell pixel. contrast vector model may may value associated geometric feature.","code":""},{"path":"intro.html","id":"intro","chapter":"Module 2 Introduction to R","heading":"Module 2 Introduction to R","text":"section describes basic ways assigning values different types R objects different classes R objects. R RStudio must installed system! Refer Lab 0 installation directions.","code":""},{"path":"intro.html","id":"panes-in-rstudio","chapter":"Module 2 Introduction to R","heading":"2.1 Panes in RStudio","text":"Source Editor can help open, edit, execute save programs. panel top left screen.Source Editor can help open, edit, execute save programs. panel top left screen.console can type code executed immediately. also known command line. bottom left screen.console can type code executed immediately. also known command line. bottom left screen.Environment pane useful shows objects (.e. arrays, data, functions) workspace.Environment pane useful shows objects (.e. arrays, data, functions) workspace.last pane number different tabs:\nFiles tab navigable file manager.\nPackages tab shows packages installed.\nPlot tab graphics shown.\nHelp tab allows search R documentation help.\nlast pane number different tabs:Files tab navigable file manager.Packages tab shows packages installed.Plot tab graphics shown.Help tab allows search R documentation help.","code":""},{"path":"intro.html","id":"your-first-r-script","chapter":"Module 2 Introduction to R","heading":"2.2 Your first R script","text":"Rscript?\nRscript simply text file containing (almost) commands enter command line R.Open RStudio.Go File.Select New FileSelect R Script.Save/Name R script working directory.example Rscript saved info-532_rscript.R. RStudio session, see created Rscript left-top pane. pane write R code saved within Rscript. bottom-left pane Console shows completed functions tasks. right panes shows Global Environment Viewer panes (coming back later).order execute commands Rscript, select line code want run press (CMD-Enter Mac). also Run button top right Script panel. can select lines code, use either ways get commands run. completed, show console panel.> console panel indicates code ready run. figure shows lines code written Rscript (top left pane), executed. can see console pane (bottom left) code executed results shown line code.Assiging values objectsIn Rscript, often want define assign object order use later functions. can using <- symbol. Using example, number 10 used 2 lines code, .e., \\(sqrt(10)\\) \\(10^2\\). Instead, efficient assign object 10 can used multiple times. code , assign \\(x\\) value 10 typing \\(x\\) <- 10 Rscript, use \\(x\\) following commands. can see results console pane, knows \\(x=10\\) runs calculations \\(x\\) produce shown results.\nNotice something added Global Environment pane top-right. mean? anything assigned Rscript (using <-), needs saved somewhere can used multiple times. saved space called Global Environment. Anything assign create shown Global Environment pane. top-right pane shows object named \\(x\\) assigned value 10.","code":""},{"path":"intro.html","id":"data-types-in-r","chapter":"Module 2 Introduction to R","heading":"2.3 Data Types in R","text":"first bit coding get used R environment. Now going explore different data types R. fundamental data types R provide building blocks data analysis. section explore data types illustrate perform operations .","code":""},{"path":"intro.html","id":"vectors","chapter":"Module 2 Introduction to R","heading":"2.3.1 Vectors","text":"vector group values type. means values either numerical (numbers), characters (letters), logical (True False). vector created Rscript using combine function, written \\(c()\\) command. Using code create vector numbers (2,…,8). assign (<-) vector name \\(x\\). also create vector numbers called \\(y\\). Let’s say want combine \\(x\\) \\(y\\) create one long vector called \\(z\\). can simply combine using \\(c()\\) command.Vectors just groups numbers, also can groups characters True/False values. vector cities created called cities vector fruits created called fruits. Note typing characters Rscript, words/characters must enclosed quotations marks indicate character value. missing value vector denoted NA shown .logical vector group elements either TRUE FALSE. example, looking cities vector, can create logical vector indicates city Northern US shown . NA indicates missing value.factor vector consists specified categories. example factor vector created called blood.pressure 8 elements, three main categories (1) Low, (2) Medium, (3) High. use factor() command take character values order based assigned levels. look blood.pressure vector see 8 elements first [1], also different levels defined.","code":"\n#Create numeric vector x\nx <- c(2,3,5,7,8)\n#Create numeric vector y\ny <- c(1,1,2,3,4)\n#Combine x and y to make z\nz <- c(x,y)\n\n#Look at z\nz [1] 2 3 5 7 8 1 1 2 3 4\n# Character vectors\ncities <- c(\"New York City\", \"Atlanta\", \"Seattle\", \"Dallas\", NA)\nfruits <- c(\"apples\", \"kiwis\", \"watermelon\", \"bananas\")\n\n#Logical vectors (are the cities norther?)\nnorthern <- c(TRUE, FALSE, TRUE, FALSE,NA)\n\n#Factor vector\nblood.pressure <- factor(c(\"High\", \"Medium\", \"High\", \"Low\", \"Medium\", \"Low\", \"High\", \"High\"),\n                         levels = c(\"Low\", \"Medium\", \"High\"))\nblood.pressure[1] High   Medium High   Low    Medium Low    High   High  \nLevels: Low Medium High"},{"path":"intro.html","id":"matrices-and-data-frames","chapter":"Module 2 Introduction to R","heading":"2.3.2 Matrices and Data Frames","text":"Matrices data frame like data tables row column structure. main difference matrix data frame matrix can contain single data type (e.g., numeric, logical, character), data frame can contain multiple types column. cases matrices data frames simply multiple vectors combined together.define matrix, use command matrix shown . create matrix sequence numbers 1 10. Note sequence numbers ordered byrow parameter. byrow set FALSE, ordered column. matrix 2 columns 5 rows, defined ncol = 2. can change number columns 5 2 rows. Positions matrix elements (called subscripts) indicated row column number, shown within square brackets [row,col].row number indicated vertically left. (e.g., rows 1 & 2 [1,], [2,]). column number indicated horizontally first row (e.g., columns 1 & 2 [,1], [,2]). want see element given position (subscript), write name matrix position number shown . example examine matrix positions [1,1] [5,2]. position [1,1], value 1, position [2,5] value 10. input position doesn’t exist, give error message stating subscript bounds.Matrices can contain data type, must data type. example, matrix characters defined .Data frames data tables contain multiple types vectors. example, can combine numeric logical vector within one data frame. create data frame, data.frame() command used. example, vector numbers, fruits (vector \\(x\\) ), logical vector combined data frame called df. IMPORTANTLY, vectors must length combined. resulting data frame (df) 6 rows 3 columns. can also subset (examine) data frame using subscripts like matrix. values positions [1,1], [3,2], first row[1,] shown.","code":"\nmatrix_byrow <- matrix(1:10, ncol =2, byrow=T)\nmatrix_byrow     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n[4,]    7    8\n[5,]    9   10\nmatrix_bycol <- matrix(1:10, ncol = 2, byrow = F)\nmatrix_bycol     [,1] [,2]\n[1,]    1    6\n[2,]    2    7\n[3,]    3    8\n[4,]    4    9\n[5,]    5   10\nmatrix_col <- matrix(1:10, ncol =5, byrow = T)\nmatrix_col     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    6    7    8    9   10\nmatrix_col[1,1][1] 1\nmatrix_col[2,5][1] 10\nmatrix_col[5,2]Error in matrix_col[5, 2]: subscript out of bounds\nx <- c(\"apples\", \"bananas\",\"pears\", \"apples\", \"pears\", \"kiwis\")\nmatrix_fruits <- matrix(x, ncol =2)\nmatrix_fruits     [,1]      [,2]    \n[1,] \"apples\"  \"apples\"\n[2,] \"bananas\" \"pears\" \n[3,] \"pears\"   \"kiwis\" \nnumbers <- c(1,2,4,5,6,1)\nfruits <- x #it is the same vector as above.\nlogical_vec <- c(TRUE, FALSE, FALSE, FALSE, TRUE, TRUE)\n\ndf <- data.frame(numbers, fruits, logical_vec)\ndf  numbers  fruits logical_vec\n1       1  apples        TRUE\n2       2 bananas       FALSE\n3       4   pears       FALSE\n4       5  apples       FALSE\n5       6   pears        TRUE\n6       1   kiwis        TRUE\n#Subset to position [1,1]\ndf[1,1][1] 1\n#Subset to position [3,2]\ndf[3,2][1] \"pears\"\n#Subset to the first row only.\ndf[1,]  numbers fruits logical_vec\n1       1 apples        TRUE"},{"path":"intro.html","id":"functions-and-packages-in-r","chapter":"Module 2 Introduction to R","heading":"2.4 Functions and Packages in R","text":"R programming language lot like magic, except instead spells functions. can think functions “wrappers” condense longer code simpler codes can write one line instead 10 lines.function?function R object takes data input performs pre-defined operation output desired result. Functions R can built-created user (user-defined).Functions enclosed round brackets (). many many many pre-defined functions R. However, can also create functions R. class, use many pre-defined functions, show example create function. show examples pre-defined functions , apply numeric vector \\(x\\).sqrt() function calculates square root input.min() function calculates minimum value input.max() function calculates max value input.summary() function calculates statistical summaries (mean, sd, min, max, quartiles) input.write user-defined (custom) function, create R function using function() command, define calculation perform, output displayed. example, function created assigned (<-) name my_function. create function , function() command used, data inputs defined \\(x\\) \\(y\\) (defined \\(x\\) \\(y\\) yet). Within function sum \\(x\\) \\(y\\) calculated returned output.my_function applied data yet. , illustrate use my_function numbers numeric vectors. IMPORTANTLY, forget include comma multiple data inputs within function ().package?\npackage simply collections functions. Packages also contain published data sets.16K packages R. One great thing R, people/coders like share create. packages, can access pre-defined functions tested, come help documentation. R packages stored shared via CRAN repository. number packages continually growing.use package, users need install , can continually call package needed. example install package, use syntax given . calls package name, requires needed packages also called installed \\(depedencies = TRUE\\).example, popular packages installed tidyverse dplyr.packages installed, saved local R libraries. means need installed . order use functions within package, package needs called using library() function. example, running code calls dplyr package. R statements indicating package called.review given function package, help() ? function publish documentation function show required inputs, calculations, outputs. example, review min() function, use syntax console.bottom-right pane publishes viewer output including: help documentation, plots. type code console, viewer pane publish help documentation min function.","code":"\nx <- c(2.1, 5.4, 6.7, 1.3, 5.2)\nsqrt(x)[1] 1.449138 2.323790 2.588436 1.140175 2.280351\nmin(x)[1] 1.3\nmax(x)[1] 6.7\nsummary(x)   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.30    2.10    5.20    4.14    5.40    6.70 \nmy_function <- function(x,y){ #create a function called my_function\n\n  sum <- x+y #the function calculates sum of x and y\n\n  return(sum) #the function returns the sum\n}\n#Perform my_function on two numbers x and y.\nmy_function(x = 1, y = 5)[1] 6\nmy_function(x = 1000, y = 300)[1] 1300\n#Perform my_function on two numeric vectors x and y.\nmy_function(x = c(1,2,4,5,6), y = c(0,7,5,6,7))[1]  1  9  9 11 13\nmy_function(x = 6, y = c(0,7,5,6,7))[1]  6 13 11 12 13\ninstall.packages(\"package_name\", dependencies = TRUE, repos = \"http://cran.us.r-project.org\")\ninstall.packages(c(\"dplyr\", \"tidyverse\"), dependencies = T)\nlibrary(dplyr)\nhelp(min)Help on topic 'min' was found in the following packages:\n\n  Package               Library\n  base                  /Library/Frameworks/R.framework/Resources/library\n  terra                 /Users/emilypeterson/Library/R/4.0/library\n\n\nUsing the first match ...\n?minHelp on topic 'min' was found in the following packages:\n\n  Package               Library\n  base                  /Library/Frameworks/R.framework/Resources/library\n  terra                 /Users/emilypeterson/Library/R/4.0/library\n\n\nUsing the first match ..."},{"path":"intro.html","id":"writing-reproducible-code","chapter":"Module 2 Introduction to R","heading":"2.5 Writing Reproducible Code","text":"R users write code, extremely important write R scripts understandable user. allows sharing Rscripts, re-running code, getting reproducible results. Additionally, allows running programs across multiple data sets. essential transparent research.Rscript workflow described organization code, important users able understand code later. following steps outline helpful way write reproducible Rscripts.Describe name, purpose, author Rscript using # comment text.Name things/objects obvious clear names, .e., data great name, county_data great name.Call libraries needed.Read dataPerform calculations.possible condense multiple lines code.sure add comments code describe steps.Save output.going review codes…don’t afraid!example good Rscript workflow shown . Rscript calls tidycensus ggplot libraries use get_decennial() function. extracts data frame 2010 total population counts state US Census.\nGood function us right? shows first 6 rows data frame using head() function. Lastly, create plot population total state using ggplot() function. Note steps comments gereen, names R objects clear concise. Also note, data frame saved Global Environment pane top-right, plot shown Viewer pane (bottom right).","code":""},{"path":"intro.html","id":"creating-a-r-markdown-file","chapter":"Module 2 Introduction to R","heading":"2.6 Creating a R Markdown file","text":"R Markdown allows create documents serve neat record analysis. RMarkdown presents code alongside output (graphs, tables, etc.) conventional text explain , bit like notebook.RMarkdown makes use Markdown syntax. markup language provides methods creating documents headers, images, links etc. can convert Markdown documents many types files like .html .pdf.First get RMarkdown working RStudio, need install \\(markdown\\) package CRAN running following:create RMarkdown file (.Rmd file), select File -> New File -> R Markdown. space enter title author. also gives option export html pdf. already installed worked LaTex can select either. LaTex, select html option.\n","code":"\ninstall.packages(\"rmarkdown\")\nlibrary(rmarkdown)"},{"path":"intro.html","id":"the-yaml-header","chapter":"Module 2 Introduction to R","heading":"2.6.1 The YAML Header","text":"top RMarkdown script YAML header section enclosed —. default includes title, author, date file type want output. default output html document.compile document, click Knitr button top panel. produce html document.","code":""},{"path":"intro.html","id":"markdown-syntax","chapter":"Module 2 Introduction to R","heading":"2.6.2 Markdown syntax","text":"Refer RMarkdown Cheat Sheet get help syntax common text formatting commands. Additionally, detailed guide Rmarkdown can found Getting Started R Markdown.embed R code within Rmarkdown file, use called code chunks. options outputted code chunk.\n+ {r, eval =F} includes code chunk within Rmarkdown file, run code inside chunk.\n+ {r, echo =F} includes output, include code Rmarkdown file.\n+ {r, include =F} excludes chunk output, runs code within chunk.\n+ {r, warning =F} hides warning messages within output.\n+ {r, comment = NA} removes double ## within code chunk.Lab 1 ActivityOpen new RMarkdown file.Change title markdown file “INFO 532 First Markdown”.Change author name.Save markdown file “LastName_Lecture 1 RMarkdown.RMD”Add header sub-header using # Header ## Sub-header.Give brief text description pane RStudio function.Create new R chunk.Within chunk create following\nnumeric vector length 6\ncharacter vector length 6\nlogical vector length 6\nfactor vector length 6\n3 x 3 matrix\ndata frame combines numeric, character, logical, factor vectors .\nnumeric vector length 6a character vector length 6a logical vector length 6a factor vector length 6a 3 x 3 matrixa data frame combines numeric, character, logical, factor vectors .Review write comments chunk explain step.Create another R chunk include followingTake square root numeric vector created.install \\(dplyr\\) package.Call \\(dplyr\\) library.review write comments within code describe step.Knit RMarkdown file using \\(Knit\\) button create html document.Save html pdf document submit Canvas.","code":""},{"path":"lecture3.html","id":"lecture3","chapter":"Module 3 Data Wrangling","heading":"Module 3 Data Wrangling","text":"chapter summarize various packages functions can used manipulate map spatial data R.Note: reference R documentation package . Click package name highlighted blue review CRAN help documentation package.","code":""},{"path":"lecture3.html","id":"introduction-to-dplyr","chapter":"Module 3 Data Wrangling","heading":"3.1 Introduction to DPLYR","text":"dplyr package part tidyverse (collection R packages) provides suite tools manipulating summarizing data tables spatial data. contains number functions data transformations. DPLYR tools can piping syntax allows sequence functions happen time. Think dplyr functions transformation spells transform data one thing another.useful functions:select(c()): selects subset specified columns reorders vertically.filter(): selects subset rows data frame based user defined conditional statements.mutate(): creates adds new columns based given set operations.recode(): recodes current column different columns based set operations.arrange(): changes order rows according columns specified.desc(): orders column descending order.summarize(): summarizes values function passed, .e., mean, max.group_by(): groups values given category.full_join, right_join, left_join: Merges data set based either joining subset observations.dplyr functions take data frame first argument layers functions using refer piping operator \\(%>%\\). condenses many lines code single chunk. illustrate dplyr tools, use flights data set available dplyr.First must install R packages already installed.Next call tidyverse dplyr packagesNext read Air Passengers data using \\(data()\\) call function. data records monthly totals number international airline passengers 1949-1960. Using class() function, can see type R object. R object time-series (ts) needs converted data frame.transform time series data frame commands. rows different years columns months Jan-Dec.piping?\npiping syntax allows us manipulate/mutate data using sequence transformations, .e., operations chained together. pipeline operator denoted using %>%.example, many cases need switch wide data long data vice-versa. case, want monthly count unique row, want transform data wide (going across columns) long (going rows).Sequence operations:Create year variable data want row unique month-year combination. \\(rownames()\\) function extracts names row (.e., year corresponding row). \\(.numeric()\\) function turns characters numbers.Create new data set called air_passengers_long assign <- old data set.Use gather() function tidyr package convert data long.want filter data include month January, use first line code. want filter Jan year greater 1955, can use second line code.can arrange dataset order variable using arrange() function.Two important functions mutate() summarize() functions. create new variables (already defined) using mutate function. example, want create new logical variable TRUE year > 1955, can use code .want summarize data, can use summarize() function. example, want mean number passengers year, first use group_by() function define groups want summarize, case year. use summarize() function define summaries want, e.g., mean, sd, median, others.Putting together using piping syntax","code":"\n# Call libraries\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# To explore more of dplyr documentation and examples use code below.\n#vignette(\"dplyr\", package = \"dplyr\")\n#Read in the starwars data\ndata(\"AirPassengers\")\n#Determine the type of R object\nclass(AirPassengers)[1] \"ts\"\n#Transform the time series data into a data frame\nair_passengers_df <- matrix(AirPassengers, ncol = 12, nrow = 12, byrow = T)\nrownames(air_passengers_df) <- 1949:1960\ncolnames(air_passengers_df) <- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\",\n                                 \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\",\n                                 \"Nov\", \"Dev\")\n\nair_passengers_df <- data.frame(air_passengers_df)\nhead(air_passengers_df)     Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dev\n1949 112 118 132 129 121 135 148 148 136 119 104 118\n1950 115 126 141 135 125 149 170 170 158 133 114 140\n1951 145 150 178 163 172 178 199 199 184 162 146 166\n1952 171 180 193 181 183 218 230 242 209 191 172 194\n1953 196 196 236 235 229 243 264 272 237 211 180 201\n1954 204 188 235 227 234 264 302 293 259 229 203 229\nair_passengers_df$year <- as.numeric(rownames(air_passengers_df))\nair_passengers_long <- air_passengers_df %>%\n  gather(key= \"Month\", value = \"count\", -year)\n\nhead(air_passengers_long)  year Month count\n1 1949   Jan   112\n2 1950   Jan   115\n3 1951   Jan   145\n4 1952   Jan   171\n5 1953   Jan   196\n6 1954   Jan   204\n#Use the filter function to subset only to data for Jan.\njan_only_df <- air_passengers_long %>%\n  filter(Month == \"Jan\")\n\n#Use the filter function to subset only to data for Jan AND for years > 1955\njan1955_only_df <- air_passengers_long %>%\n  filter(Month == \"Jan\" & year > 155)\n#Arrange the data by year\narrange_df <- air_passengers_long %>%\n  arrange(year)\nhead(arrange_df)  year Month count\n1 1949   Jan   112\n2 1949   Feb   118\n3 1949   Mar   132\n4 1949   Apr   129\n5 1949   May   121\n6 1949   Jun   135\n#Create a new logical variable using the mutate function, if year > 1955 then TRUE else FALSE.\nmutate_df <- air_passengers_df %>%\n  mutate(year_indicator <- ifelse(year > 1955, TRUE, FALSE))\n# First group_by year to group the data by year variable.\n#Then summarize the mean number of passengers to get the mean BY year.\nsummary_df <- air_passengers_long %>%\n  group_by(year) %>%\n  summarize(mean_number = mean(count))\n\nhead(summary_df)# A tibble: 6 × 2\n   year mean_number\n  <dbl>       <dbl>\n1  1949        127.\n2  1950        140.\n3  1951        170.\n4  1952        197 \n5  1953        225 \n6  1954        239.\nlibrary(dplyr)\ndata(\"AirPassengers\")\nair_passengers_df <- matrix(AirPassengers, ncol = 12, nrow = 12, byrow = T)\nrownames(air_passengers_df) <- 1949:1960\ncolnames(air_passengers_df) <- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\",\n                                 \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\",\n                                 \"Nov\", \"Dev\")\n\nair_passengers_mean_data <- data.frame(matrix(AirPassengers, ncol = 12, nrow = 12, byrow = T)) %>%\n  dplyr::rename(c(\"Jan\" = \"X1\", \"Feb\" = \"X2\", \"Mar\" = \"X3\", \"Apr\" = \"X4\", \"May\" = \"X5\",\n                                 \"Jun\" = \"X6\", \"Jul\" = \"X7\", \"Aug\" = \"X8\",\n                                  \"Sep\" = \"X9\", \"Oct\" = \"X10\",\n                                 \"Nov\" = \"X11\", \"Dec\" = \"X12\")) %>%\n  dplyr::mutate(year= c(1949:1960),\n                year_indicator <- ifelse(year > 1955, TRUE, FALSE)) %>%\n   tidyr::gather(key= \"Month\", value = \"count\", -year) %>%\n    dplyr::filter(Month == \"Jan\") %>%\n      dplyr::arrange(year) %>%\n        dplyr::group_by(year) %>%\n           dplyr::summarize(mean_number = mean(count))\n\nair_passengers_mean_data# A tibble: 12 × 2\n    year mean_number\n   <int>       <dbl>\n 1  1949         112\n 2  1950         115\n 3  1951         145\n 4  1952         171\n 5  1953         196\n 6  1954         204\n 7  1955         242\n 8  1956         284\n 9  1957         315\n10  1958         340\n11  1959         360\n12  1960         417"},{"path":"lecture3.html","id":"introduction-to-sf","chapter":"Module 3 Data Wrangling","heading":"3.2 Introduction to sf","text":"new class spatial objects defined called simple features sf. \\(Sf\\) objects appear data frame extra column named geometry contains geometrical information spatial part object. rest chapter, learn manipulate spatial features.\nIllustration Allison Horst, see Simple Features BlogWhat feature?feature thought thing, object real world, building tree. Features geometry describing Earth feature located, attributes, describe properties.Simple feature geometry typesThe following seven simple feature types common.going use data New Haven CT work different kinds spatial data. First need run commands us \\(sf\\) package New Haven data. New Haven data contains several \\(sf\\) data frames:\n1. blocks data frame population demographics broken block. attributes saved within spatial polygons (boundaries blocks).\n2. breach data frame location data public disturbances (crimes). attributes saved spatial points (x,y coordinates breaches).\n3. roads contains spatial lines mark road locations.shows blocks sf data frame gives example sf data frame contains spatial locations/features attributes features. geometry type listed polygon captures boundaries census blocks. also shows bounding box minimum maximum x,y coordinates. column denotes spatial attributes characteristics block (row), e.g., POP1990 column reports total population 1990 block 1 (pop=3071). last column geometry holds spatial features block meaning geographic boundaries polygon.Many dplyr functions described can used sf data frame. example, can use \\(filter()\\) function include larger populations POP1990> 1000. Additionally, can create new variable called RentOcc calculates number housing units renter occupied.Spatial Joins combine multiple data sets case data recorded spatial features. join \\(sf\\) data set, use \\(st_join(x,y)\\) function. data data set \\(y\\) merged data \\(x\\). \\(y\\) contains values outside \\(x\\) boundaries, discarded. example, location \\(y\\) outside boundaries \\(x\\) removed.code, merge together data block_sf data set (population attributes census blocks) breach_sf data set (locations crimes). new data set called block_breach_sf polygon object, attributes polygon containing particular point joined columns.","code":"\n#Install and Call in the sf and GISTools libraries.\nlibrary(sf)\nlibrary(dplyr)\nlibrary(GISTools)\n\n#Call in the newhaven data\ndata(newhaven)Simple feature collection with 6 features and 28 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 534687.6 ymin: 177306.3 xmax: 569625.3 ymax: 188464.6\nProjected CRS: SOURCECRS\n  NEWH075H_ NEWH075H_I HSE_UNITS OCCUPIED VACANT  P_VACANT P_OWNEROCC\n0         2         69       763      725     38  4.980341   0.393185\n1         3         72       510      480     30  5.882353  20.392157\n2         4         64       389      362     27  6.940874  57.840617\n3         5         68       429      397     32  7.459207  19.813520\n4         6         67       443      385     58 13.092551  80.361174\n5         7        133       588      548     40  6.802721  52.551020\n  P_RENTROCC NEWH075P_ NEWH075P_I POP1990  P_MALES P_FEMALES   P_WHITE\n0  94.626474         2        380    2396 40.02504  59.97496  7.095159\n1  73.725490         3        385    3071 39.07522  60.92478 87.105177\n2  35.218509         4        394     996 47.38956  52.61044 32.931727\n3  72.727273         5        399    1336 42.66467  57.33533 11.452096\n4   6.546275         6        404     915 46.22951  53.77049 73.442623\n5  40.646259         7        406    1318 50.91047  49.08953 87.784522\n    P_BLACK P_AMERI_ES P_ASIAN_PI  P_OTHER  P_UNDER5    P_5_13  P_14_17\n0 87.020033   0.584307   0.041736 5.258765 12.813022 24.707846 7.888147\n1 10.452621   0.195376   0.521003 1.725822  1.921198  2.474764 0.814067\n2 66.265060   0.100402   0.200803 0.502008 10.441767 13.554217 5.722892\n3 85.553892   0.523952   0.523952 1.946108 10.853293 17.739521 7.709581\n4 24.371585   0.327869   1.420765 0.437158  6.229508  8.633880 2.950820\n5  7.435508   0.758725   0.834598 3.186646  8.725341  8.194234 3.641882\n    P_18_24   P_25_34   P_35_44  P_45_54  P_55_64   P_65_74   P_75_UP\n0 12.479132 16.026711  8.555927 5.759599 4.924875  4.048414  2.796327\n1 71.149463  7.359166  4.037773 1.595571 1.758385  3.712146  5.177467\n2  8.835341 17.670683 17.871486 8.734940 5.923695  7.931727  3.313253\n3 12.425150 18.113772 10.853293 9.056886 6.287425  4.266467  2.694611\n4  7.103825 17.267760 16.830601 8.415301 7.431694 14.426230 10.710383\n5 10.091047 29.286798 12.898331 7.814871 7.814871  6.904401  4.628225\n                        geometry\n0 POLYGON ((540989.5 186028.3...\n1 POLYGON ((539949.9 187487.6...\n2 POLYGON ((537497.6 184616.7...\n3 POLYGON ((537497.6 184616.7...\n4 POLYGON ((536589.3 184217.5...\n5 POLYGON ((568032.4 183170.2...\n#Use the filter function to subset to blocks with population >1000\n# Use mutate function to create RentOcc = number of renter occ housing units.\nblocks_subset <- blocks_sf %>%\n  filter(POP1990>1000) %>%\n  mutate(RentOcc = HSE_UNITS * P_RENTROCC/100)\ntemp <- breach_sf %>%\n  st_join(blocks_sf)"},{"path":"lecture3.html","id":"an-introduction-to-tmap","chapter":"Module 3 Data Wrangling","heading":"3.3 An Introduction to TMAP","text":"section concentrate learning functions tmap (Tennekes, 2015). package focuses mapping spatial distribution data attributes. similar grammar plotting *ggplot package seeks handle element map separately series layers.process making maps using tmap one series layers added map. First \\(tm_shape()\\) specified, followed aesthetic function specifies plotted. input \\(tm_shape()\\) sf object.","code":""},{"path":"lecture3.html","id":"layer-1","chapter":"Module 3 Data Wrangling","heading":"3.3.1 Layer 1","text":"example, may want plot New Haven crime data. first layer plot geographic polygons (census block boundaries) New Haven. input \\(blocks\\_sf\\) object \\(tm_shape()\\) function. plot borders spatial layer data outlines census block boundaries. add custom styles background, refer \\(?tm\\_style\\) \\(tm\\_layout\\) see possible options documentation.can see code one set layers borders customize look, color, outline.","code":"\n?tm_style\n?tm_layout\n\ntm_shape(blocks_sf)+\n  tm_borders(col = \"red\", lty = \"dashed\") +\n  tm_style(\"natural\", bg.color = \"lightblue\") +\n  tm_layout(title = \"New Haven CT\",\n            title.size = 1,\n            title.position = c(0.55, \"top\"))"},{"path":"lecture3.html","id":"layer-2","chapter":"Module 3 Data Wrangling","heading":"3.3.2 Layer 2","text":"plot geographic boundaries alone give much information. add second layer can include spatial attributes areas (polygons). add second layer current plot, add another \\(tm\\_shape()\\) function, add second \\(sf\\) object input contains spatial area data. example, plot percent renter occupied housing units.","code":"\n?tm_style\n?tm_layout\n\ntm_shape(blocks_sf)+\n  tm_borders(col = \"red\", lty = \"dashed\") +\n  tm_shape(blocks_sf) +\n  tm_polygons(col = \"P_RENTROCC\", palette = \"Blues\") +\n  tm_layout(title = \"New Haven CT\",\n            title.size = 1,\n            title.position = c(0.55, \"top\"))"},{"path":"lecture3.html","id":"layer-3","chapter":"Module 3 Data Wrangling","heading":"3.3.3 Layer 3","text":"third layer New Haven plot may include point layer plots geographic coordinates breaches peace. add point data using \\(tm\\_dots()\\) command.","code":"\n?tm_style\n?tm_layout\n\ntm_shape(blocks_sf)+\n  tm_borders(col = \"red\", lty = \"dashed\") +\n  tm_polygons(col = \"P_RENTROCC\", palette = \"Blues\") +\n    tm_shape(breach_sf) +\n      tm_dots(col = \"blue\", size = 0.1) +\n  tm_layout(title = \"New Haven CT\",\n            title.size = 1,\n            title.position = c(0.55, \"top\"))"},{"path":"lecture3.html","id":"layer-4","chapter":"Module 3 Data Wrangling","heading":"3.3.4 Layer 4","text":"fourth layer New Haven plot may include lines layer plots roads New Haven. , add another \\(tm\\_shape()\\) function, add third \\(sf\\) object input contains lines data (roads_sf). add line data using \\(tm\\_lines()\\) command.","code":"\n?tm_style\n?tm_layout\nroads_sf <- st_as_sf(roads)\nst_crs(roads_sf) <- st_crs(blocks_sf)\n\ntm_shape(blocks_sf)+\n  tm_borders(col = \"red\", lty = \"dashed\") +\n  tm_polygons(col = \"P_RENTROCC\", palette = \"Blues\", alpha = 0.5) +\n    tm_shape(breach_sf) +\n      tm_dots(col = \"blue\", size = 0.1) +\n        tm_shape(roads_sf) +\n          tm_lines(col = \"purple\", alpha = 0.5) +\n  tm_layout(title = \"New Haven CT\",\n            title.size = 1,\n            title.position = c(0.55, \"top\"))"},{"path":"lecture3.html","id":"adding-context","chapter":"Module 3 Data Wrangling","heading":"3.3.5 Adding Context","text":"situations map background context may informative. number options , including OpenStreetMap, GoogleMaps, Leaflet. requires additional packages downloaded installed R.Using OpenStreetMap, approach define area interest, download plot map tile OpenStreetMap plot data tiles.","code":"\ninstall.packages(\"OpenStreetMap\", dep=T)\nlibrary(OpenStreetMap)\nlibrary(OpenStreetMap)\nlibrary(tmaptools)\n\n\ntmap_mode(\"plot\")\n\n#To use Open Street Map, transform first to projections to EPSG 4326.\n\"+proj=longlat + ellps=WGS84\"[1] \"+proj=longlat + ellps=WGS84\"\nblocks_transform <- st_transform(blocks_sf, 4326)\nbreach_transform <- st_transform(breach_sf, 4326)\n\nbox <- st_bbox(blocks_transform)\n\ntest <- read_osm(box, type = \"osm\")\n\nom_map <- tm_shape(test) +\n  tm_rgb() +\n  tm_shape(breach_transform) +\n  tm_dots(col = \"red\")\n\nprint(om_map)"},{"path":"lecture3.html","id":"saving-your-map","chapter":"Module 3 Data Wrangling","heading":"3.3.6 Saving Your Map","text":"created map window, may now want save map either printing incorporating document. simple steps save map multiple formats.plot map Viewer pane (bottom right), can click Export button save pdf copy clipboard.plot map Viewer pane (bottom right), can click Export button save pdf copy clipboard.directly save map pdf/png jep. open street map object assigned “om_map”. Taking pdf export example, print map using \\(pdf()\\) command, lists filepath pdf file name extension.directly save map pdf/png jep. open street map object assigned “om_map”. Taking pdf export example, print map using \\(pdf()\\) command, lists filepath pdf file name extension.","code":"\npdf(\"filepath/mymap.pdf\")\nprint(om_map)\ndev.off()\n\n\njpeg(\"filepath/mymap.jpg\")\nprint(om_map)\ndev.off()"},{"path":"lecture3.html","id":"interactive-mapping","chapter":"Module 3 Data Wrangling","heading":"3.3.7 Interactive Mapping","text":"Interactive maps great method include multiple pieces information within one map. Changing tmap mode “View” allows interactive map created using Leaflet \\(tmap\\). multiple pieces information contained within map, \\(mapview\\) package","code":"\n# tmap_mode(\"view\")\n# \n#    tm_shape(test) +\n#    tm_rgb() +\n#    tm_shape(breach_transform) +\n#    tm_dots(col = \"red\")"},{"path":"lecture3.html","id":"introduction-to-tidycensus","chapter":"Module 3 Data Wrangling","heading":"3.4 Introduction to TIDYCENSUS","text":"tidycensus package Kyle Walker R package designed facilitate process acquiring working US Census Bureau population data R environment. designed streamline data wrangling process spatial Census data analysis. tidycensus R users can acquire census reported variables interest geometric spatial attributes helps facilitate mapping spatial analysis. US Census Bureau data consists :US decennial census data 2010 2020 requested using \\(get\\_decennial()\\).1-year 5-year American Community Survey (ACS) population demographic data requested using \\(get\\_acs()\\).Population Projection Estimates (PEP) requested using \\(get\\_estimates()\\).ACS Public Use Microdata requested using \\(get\\_pums()\\).ACS Migration Flows requested using \\(get\\_flows()\\).Note comprehensive tutorial tidycensus. give introduction capabilities package.","code":""},{"path":"lecture3.html","id":"geography-in-tidycensus","chapter":"Module 3 Data Wrangling","heading":"3.4.1 Geography in Tidycensus","text":"USCB reports data national level county census block level. Importantly, data sources report data geographies. decennial census 5-year ACS estimates report census block. However, PEP reports county level metro/micro-politan areas.","code":""},{"path":"lecture3.html","id":"searching-for-variables-in-tidycensus","chapter":"Module 3 Data Wrangling","heading":"3.4.2 Searching for variables in Tidycensus","text":"One challenge extracting variable names USCB data sources. tidycensus package contains \\(load\\_variable()\\) function can list variable names descriptions. browsing subsetting table, can search relevant variables needed analysis.","code":"\n# install.packages(\"tidycensus\")\nlibrary(tidycensus)\nvars <- load_variables(2020, \"acs5\")\nhead(vars)"},{"path":"lecture3.html","id":"extracting-the-data-in-tidycensus","chapter":"Module 3 Data Wrangling","heading":"3.4.3 Extracting the data in Tidycensus","text":"Let’s work examples extract ACS. parameters passed \\(get\\_acs()\\) function require :\n1. geography spatial resolution want reported. want county level data.\n2. state optional parameter want specific state. default NULL want US.\n3. variables listed needed variables list . chose variable median household income.\n4. year (self-explanatory?)\n5. geometry important parameter. set \\(T\\) data frame include spatial boundaries counties data frame produce \\(sf\\) object.resulting data frame row county. row lists county name, estimate variable, associated margins error (otherwise referred sampling error ACS). Additionally, geographic identification (GEOID) geometric features column.Next let’s work examples extract PEP. parameters passed \\(get\\_estimate()\\) function require :\n1. geography spatial resolution want reported. want county level data.\n2. state optional parameter want specific state. default NULL want US.\n3. product lists three optioins: (1) population totals (“population”), (2) populations characteristics (“characteristics”), (3) housing units (“housing”). request populations sex race breakdowns.\n4. breakdown* lists RACE, SEX, AGE (years 2020+), HISPANIC.\n4. year** (self-explanatory?)\n5. geometry set \\(T\\) data frame include spatial boundaries counties data frame produce \\(sf\\) object.resulting data frame row county. row lists county name, value variable. example, population estimate 2019 White population Fulton County 483838 across sexes.","code":"\nlibrary(tidycensus)\nlibrary(tidyverse)\n\nga_hinc <- get_acs(\n  geography = \"county\",\n  state = \"Georgia\",\n  variables= c(\"B19013_001\"),\n  year = 2020,\n  geometry = T)\n\nhead(ga_hinc)\nlibrary(tidycensus)\nlibrary(tidyverse)\nlibrary(tmap)\n\nga_sexrace <- get_estimates(\n  geography = \"county\",\n  state = \"Georgia\",\n  product= c(\"characteristics\"),\n  breakdown = c(\"SEX\",\"RACE\"),\n  breakdown_labels = T,\n  year = 2019,\n  geometry = T)\n\nhead(ga_sexrace)"},{"path":"lecture3.html","id":"introduction-to-shapefile-and-tigris","chapter":"Module 3 Data Wrangling","heading":"3.5 Introduction to Shapefile and Tigris","text":"Shapefiles popular method representing geospatial vector data GIS. shapefile can store data form points, lines, polygons. can used represent administrative boundaries (think country/state/county borders) roads, rivers, lakes etc. shapes, together data attributes linked shape, create representation geographic data. Three mandatory files related shapefiles use extensions (.shp, .shx, .dbf). actual shapefile relates .shp file.Shapefiles can found internet various publishers. example,US census bureau publishes shapefiles entire US. USCB’s TIGER/Line database includes high-quality series geographic datasets suitable spatial cartographic analyses. TIGER/Line shapefiles include three general types data:Legal entities: Legal geographic entities including county state boundaries.Statistical entities: Non legal entities boundaries statistical meaning, .e., census tracts . block groups.Geographic features: Geographic datasets linked aggregrate demographic information including water road fetures.USCB website, downloaded shapefile contains roads state GA. Using \\(sf\\) package, read shapefile using \\(st\\_read\\) function. gives \\(sf\\) data frame contains geometric features shapefile. Using \\(tmap\\) package, can plot \\(sf\\) object.tigris package simplifies process R users obtaining using Census geographic datasets. full list shapefiles tigris available hereFor example, \\(states()\\) function can used download boundaries U.S. states. function produces \\(sf\\) data frame geometric features.Additionally, can extract shapefiles corresponding specific counties within state.Let’s add map adding roads water areas. get roads GA using \\(primary\\_secondary\\_roads()\\) function requires state parameter set. obtain water areas, must obtain water geometries county within state GA. use \\(area\\_water()\\) function state county parameters.Lab 3 ActivityFor lab, reading project data contain different data tables dependent particular project. Read data explore data using \\(View()\\) \\(head()\\) functions.lab, reading project data contain different data tables dependent particular project. Read data explore data using \\(View()\\) \\(head()\\) functions.US-based projects, use tidycensus extract population counts given area using \\(get\\_estimates()\\) function provides PEP based population counts. sure include geography area level data. non-US based projects, use \\(st\\_read()\\) function read necessary shapefiles.US-based projects, use tidycensus extract population counts given area using \\(get\\_estimates()\\) function provides PEP based population counts. sure include geography area level data. non-US based projects, use \\(st\\_read()\\) function read necessary shapefiles.Write introduction Data paragraph describes audience familiar project. Describe data reported data table. include following:\n“relevant” variables contained data table.\ngeographical units captured data.\ntype data (points, lines, polygons)\nWrite introduction Data paragraph describes audience familiar project. Describe data reported data table. include following:“relevant” variables contained data table.geographical units captured data.type data (points, lines, polygons)spatial join points polygon data using \\(st\\_join()\\) function \\(sf\\). Create new data set contains area attributes corresponding geographic point.spatial join points polygon data using \\(st\\_join()\\) function \\(sf\\). Create new data set contains area attributes corresponding geographic point.Use layering \\(tmap\\) produce preliminary plot chloropleth map area attributes points representing location data.Use layering \\(tmap\\) produce preliminary plot chloropleth map area attributes points representing location data.Write descriptive paragraph Exploratory Analysis illustrates map various patterns observed data. Based map, add descriptions spatial relationships observe.Write descriptive paragraph Exploratory Analysis illustrates map various patterns observed data. Based map, add descriptions spatial relationships observe.","code":"\nshp <- st_read(\"data/shapefiles/tl_2019_13_prisecroads.shp\")\nclass(shp)\nhead(shp)\n\ntm_shape(shp) +\n  tm_lines(col = \"black\")\n# install.pakcages(\"tigris\", dep =T)\nlibrary(tigris)\nlibrary(tmap)\nst <- states()\nhead(st)\ntm_shape(st$geometry) +\n  tm_borders(col = \"black\")\nga_counties <- counties(\"GA\")\ntm_shape(ga_counties) +\n  tm_borders(col = \"black\")\nfips <- unique(ga_counties$COUNTYFP)\n\n\nroad_data <- primary_secondary_roads(\"GA\")\nwater_list <- list()\n\nfor(c in 1:length(cos)){\nwater_list[[c]] <- area_water(\"GA\", fips[c])\n}\n\nwater_data <- do.call(\"rbind\", water_list)\n\ntm_shape(ga_counties) +\n  tm_borders(col = \"black\") +\n  tm_shape(water_data) + \n  tm_borders(col = \"blue\") +\n  tm_shape(road_data) +\n  tm_lines(col = \"orange\")"},{"path":"lecture4.html","id":"lecture4","chapter":"Module 4 Basic GIS Operations","heading":"Module 4 Basic GIS Operations","text":"Thought box\nGIS spatial analysis, often interested finding information contained one spatial dataset relates contained another.Big Picture Question: public health goal investigate counts /rates given health indicator event within context spatial attributes.questions may interested investigating?\nTrends rates/counts specific locations areas?\nRelationship outcomes proximity thinks physical environment.\nRelationships outcomes socio-demographic risk factors.\nmany X different locations Y?\nmany X found within certain distance Y?\nTrends rates/counts specific locations areas?Relationship outcomes proximity thinks physical environment.Relationships outcomes socio-demographic risk factors.many X different locations Y?many X found within certain distance Y?Can think public health research applications may want answer questions ?chapter use examples illustrate number fundamental commonly applied spatial operations spatial datasets. Essentially, operations illustrate different methods extracting information one spatial dataset based spatial extent another, referred overlay operations. sections describe following operations:Intersection clipping one dataset extent another, Section 4.2Creating buffers around features 4.3Merging features spatial dataset 4.4Point--polygon area calculationsCreating distance attributesCombining spatial data attributesConverting raster vector","code":""},{"path":"lecture4.html","id":"new-haven-data","chapter":"Module 4 Basic GIS Operations","heading":"4.1 New Haven Data","text":"lectures, illustrate analysis using data [New Haven CT crime web site] containing point sources crimes, plus roads, railways, census block spatial data frames. New Haven data include:blocks: polygon data set demographic breakdowns census blocks within New Haven.breach: point data set locations breaches peace.roads: lines data set road spatial features New Haven.places: point data set locations major landmarks New Haven.famdisp: point data set locations family disputes.plot shows example New Haven data, plot population census block (orange polygons), breaches peace (red), landmarks (blue), roads (green.)","code":""},{"path":"lecture4.html","id":"sec1","chapter":"Module 4 Basic GIS Operations","heading":"4.2 Spatial Clip and Intersection Operations","text":"clipping?geographic clip cuts input layer defined spatial feature boundary. Like cookie-cutter spatial area. clip intersect tool achieve results. main difference intersection preserves attributes tables.Consider situation aim analyze incidence particular area: want analyze data records describe events given study area. code call New Haven data create \\(sf\\) data frames blocks breaches data. subset areas central New haven subsets census block data include selected areas.want? . want clip breach data include points within selected areas. number ways clip spatial data. simplest way use spatial boundaries one index subset another.However, clip (crop) operations simply subset data based spatial boundaries. may applications wish combine attributes different data sets based spatial intersection. \\(st\\_intersection()\\) function allows us , shown . want combine breach census block data New Haven. can see combine data sets obtain point data frame census block attributes location.","code":"\n#Call in the libraries\nlibrary(dplyr)\nlibrary(GISTools)\nlibrary(tmap)\nlibrary(sf)\n\n#read in New Haven data and...\n#transform the census block and breach data to sf objects\ndata(newhaven)\nblocks_sf <- st_as_sf(blocks)\nbreach_sf <- st_as_sf(breach)\n\n\n# Set the indices to subset\nindices <- c(46:47,51, 53, 57:100)\n# Create a new data set blocks_sf2 that includes only the selected areas\nblocks_sf2 <- blocks_sf[indices,]\n\ntm_shape(blocks_sf2) +\n  tm_polygons(col = \"white\") +\n  tm_shape(breach_sf) +\n  tm_dots(col = \"red\")\n#Clip the breach data to align with the blocks2 data.\n\nbreach_clip_sf <- breach_sf[blocks_sf2,]\n#Intersect breach and block data\nbr_bl_sf <- st_intersection(blocks_sf2, breach_sf)\nhead(br_bl_sf)Simple feature collection with 6 features and 28 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 546241.4 ymin: 169623.6 xmax: 558373.1 ymax: 177376.3\nProjected CRS: SOURCECRS\n   NEWH075H_ NEWH075H_I HSE_UNITS OCCUPIED VACANT  P_VACANT P_OWNEROCC\n98       100         25       375      311     64 17.066667   4.266667\n93        95        111         0        0      0  0.000000   0.000000\n99       101         27       207      168     39 18.840580  11.111111\n83        85        123       461      389     72 15.618221  29.067245\n52        54         87       347      328     19  5.475504   2.305476\n95        97         51       302      270     32 10.596026  36.092715\n   P_RENTROCC NEWH075P_ NEWH075P_I POP1990  P_MALES P_FEMALES   P_WHITE\n98   78.66667       100        528     499 56.91383  43.08617 73.547094\n93    0.00000        95        523       0  0.00000   0.00000  0.000000\n99   70.04831       101        531     782 53.45269  46.54731 30.306905\n83   55.31453        85        511    1277 48.08144  51.91856 48.238058\n52   92.21902        54        471     967 42.50259  57.49741  3.102378\n95   53.31126        97        525     823 49.33171  50.66829 50.911300\n    P_BLACK P_AMERI_ES P_ASIAN_PI   P_OTHER  P_UNDER5    P_5_13  P_14_17\n98 14.82966   1.002004   9.018036  1.603206  0.801603  2.605210 0.400802\n93  0.00000   0.000000   0.000000  0.000000  0.000000  0.000000 0.000000\n99 45.26854   0.255754   0.511509 23.657289  9.335038 15.089514 5.626598\n83 23.49256   0.156617   0.234926 27.877839 10.884886 17.306186 6.499608\n52 94.20889   0.103413   0.000000  2.585315 14.788004 22.130300 7.032058\n95 45.07898   0.243013   0.729040  3.037667  9.599028  8.626974 3.037667\n    P_18_24  P_25_34   P_35_44  P_45_54  P_55_64   P_65_74   P_75_UP\n98 37.47495 30.06012 12.825651 7.615230 4.208417  2.605210  1.402806\n93  0.00000  0.00000  0.000000 0.000000 0.000000  0.000000  0.000000\n99 10.99744 22.63427 18.414322 7.161125 4.219949  4.731458  1.790281\n83 13.31245 17.85435 13.547377 9.162099 5.481597  3.054033  2.897416\n52 14.06412 16.95967  8.273009 7.549121 4.446743  3.516029  1.240951\n95 12.39368 15.30984 11.664642 7.168894 8.140948 10.692588 13.365735\n                    geometry\n98 POINT (551423.1 172304.5)\n93 POINT (555168.5 172163.4)\n99 POINT (549133.6 169623.6)\n83 POINT (558373.1 173223.7)\n52 POINT (549729.3 177376.3)\n95 POINT (546241.4 171265.2)\ntm_shape(blocks_sf2) +\n  tm_borders(col = \"black\") +\n  tm_shape(br_bl_sf)+\n  tm_dots(col = \"red\")"},{"path":"lecture4.html","id":"sec2","chapter":"Module 4 Basic GIS Operations","heading":"4.3 Buffers and Features","text":"Buffer?buffer GIS reclassification based distance: classification within/without given proximity. words, buffer GIS defined zone area created around geographic feature point, line, polygon.buffer typically measured units distance, feet, meters, kilometers, represents specific radius width around feature.many situations, interested events features occur neat area interest well within . may interested crimes occur within certain distance particular areas locations. Buffering operations provide convenient way , buffers can created using \\(st\\_buffer()\\) function. New Haven data, \\(places\\) data frame contains major landmarks New Haven. can create buffers around major neighborhoods define crimes happen within certain distance neighborhoods.Setting distance buffer: case dist units object, convertible arc_degree x geographic coordinates, st_crs(x)$units otherwise.EMILY CHECK THINK 1500m. Pertaining change projections.Alternatively, want subset data include areas/points located within certain distance another spatial extent, can use \\(st\\_is\\_within\\_distance()\\) function. want identify breaches occur within 1500m neighborhood centroids. use function define following: (1) first input points want centroids, (2) area/points lay within distance, (3) distance value.","code":"\ndata(newhaven)\nbreach_sf <- st_as_sf(breach)\nplaces_sf <- st_as_sf(places, coords = c(\"longitude\", \"latitude\"), crs = \"NAD83\")\n\nst_crs(places_sf) <- st_crs(breach_sf)\n\n#Create a polygon buffer around the places centroids. \nplaces_sf_buff <- st_buffer(places_sf, dist = 1500)\n\n\ntm_shape(blocks_sf) +\n  tm_polygons(col = \"white\") +\n  tm_shape(places_sf) +\n  tm_dots(col = \"blue\", size = 0.3) +\n  tm_shape(places_sf_buff) +\n  tm_borders(col = \"green\") +\n  tm_shape(breach_sf) +\n  tm_dots(col = \"red\")\nindices_within_dist <- unlist(st_is_within_distance(places_sf, breach_sf, dist = 1500))\nbreach_within <- breach_sf[indices_within_dist,]\n\ntm_shape(blocks_sf) +\n  tm_polygons(col = \"white\") +\n  tm_shape(places_sf) +\n  tm_dots(col = \"blue\", size = 0.2) +\n  tm_shape(places_sf_buff) +\n  tm_borders(col = \"green\") +\n  tm_shape(breach_within) +\n  tm_dots(col = \"red\")"},{"path":"lecture4.html","id":"sec3","chapter":"Module 4 Basic GIS Operations","heading":"4.4 Merging Spatial Features","text":"intersection example, selected census blocks within New Haven used define area interest. Attributes selected census blocks added point data breaches. instances, may wish consider area single object merge features within . can done using \\(st\\_combine()\\) function. exmaple, wanted derive outline city New Haven, can merge attributes census block data shown .union operations merge spatial object sub-geometries. merged objects created can used inputs intersection buffering procedures order select data analysis. merged objects can also used cartographic context provide border study area considered.","code":"\nmerge_blocks <- st_union(blocks_sf)\nmerge_blocks## Geometry set for 1 feature \n## Geometry type: POLYGON\n## Dimension:     XY\n## Bounding box:  xmin: 531731.9 ymin: 147854 xmax: 569625.3 ymax: 188464.6\n## Projected CRS: SOURCECRS\ntm_shape(blocks_sf) +\n  tm_borders(col = \"darkgreen\", lty = 3) +\n  tm_shape(merge_blocks) +\n  tm_borders(lwd = 1.5, col = \"black\")"},{"path":"lecture4.html","id":"point-in-polygon-and-area-calculations","chapter":"Module 4 Basic GIS Operations","heading":"4.5 Point-In-Polygon and Area Calculations","text":"","code":""},{"path":"lecture4.html","id":"point-in-polygon","chapter":"Module 4 Basic GIS Operations","heading":"4.5.1 Point-In-Polygon","text":"often useful count number points falling within different ones polygon datasets. can done using \\(poly.counts()\\) function GISTools package, extends \\(st\\_contains()\\) function. code assigns list counts number crimes occur inside census block using \\(st\\_contain()\\) function. use \\(lapply()\\) function count number crimes list element.number represent number breaches census block row \\(blocks\\_sf\\) data frame.","code":"\ncrime.count <- rowSums(st_contains(blocks_sf,breach_sf, sparse = F))\nblocks_sf$crime.count <- crime.count\nblocks_sf$crime.count[1:10] [1] 2 0 2 0 2 0 0 0 3 0"},{"path":"lecture4.html","id":"area-calculations","chapter":"Module 4 Basic GIS Operations","heading":"4.5.2 Area Calculations","text":"Another useful operation able calculate polygon areas. \\(st\\_area()\\) function computes euclidean great circle distance pairs geometries. results show square footage first 4 census blocks. Perhaps super useful metric use. can convert calculation square mile using \\(ft2mile()\\) function, converts 2.8 sq. feet per sq. mile.","code":"\nareas_calc <- st_area(blocks_sf)\nareas_calc[1:4]\nft2miles(areas_calc[1:4])"},{"path":"lecture4.html","id":"creating-distance-attributes","chapter":"Module 4 Basic GIS Operations","heading":"4.6 Creating Distance Attributes","text":"distance important?Distance fundamental spatial analysis. Distance measures used evaluate differences accessibility different social groups.may wish analyze number locations people within certain distances spatial features. Distance approximated using series buffers created specific distance intervals around features. common function used dist(). calculates Euclidean distance points.Let’s calculate distance centroids (midpoints) New Haven census blocks green spaces locations (also represent features, .e., facility locations, clinics). locations green spaces NH saved places dataset.distances: 129 9 matrix.block midpoint, distance (miles) 9 different places.Using matrix, can provide measure average distance experienced people living area (census block) get places.","code":"\n#Extract the centroids (midpoints) of the New Haven census blocks. \ncentroids <- st_centroid(blocks_sf)\n\n#Calculate the distance between the census block midpoints and the place locations.\n#notes the use of the ft2miles function to convert to miles\ncents_sf <- st_as_sf(centroids)\ndistances <- ft2miles(st_distance(cents_sf, places_sf))\ndistances[1:5]Units: [US_survey_foot]\n[1] 2.910784 2.666624 2.963935 2.924395 3.175274\ntm_shape(blocks_sf) +\n  tm_polygons(\"white\")+\n  tm_borders(\"black\") +\ntm_shape(cents_sf) +\ntm_dots(\"red\") +\n  tm_shape(places_sf) +\n  tm_dots(col = \"green\", size = 0.3, alpha = 0.8) "},{"path":"lecture4.html","id":"distanceaccessibility-analysis","chapter":"Module 4 Basic GIS Operations","heading":"4.7 Distance/Accessibility Analysis","text":"use distance measures conjunction census data particularly useful analyzing access locations facilities. may want examines access green spaces hospitals different social groups. current example, can examine equity access local landmarks recorded places location data different ethnic groups reported blocks dataset. use census data approximate number people without access less 1 mile.Let’s take look dataThe populations ethnic group census block can extracted blocks dataset:Lab 4 ActivityUsing R Markdown file Lab 3, read project data convert \\(sf\\) data frame using \\(st\\_as\\_sf()\\) function .Using R Markdown file Lab 3, read project data convert \\(sf\\) data frame using \\(st\\_as\\_sf()\\) function .Using area (polygon) data, create set indices subset (can set indices can use code selects 5 indices random 50 indices).Using area (polygon) data, create set indices subset (can set indices can use code selects 5 indices random 50 indices).Create data frame includes selected row indices.Create data frame includes selected row indices.Subset point data include points selected areas.Subset point data include points selected areas.Plot subsetted point area data using \\(tmap\\) functions.Plot subsetted point area data using \\(tmap\\) functions.Using full point area data, create buffer 1000 m surrounding point create plot boundaries spatial polygons, points, surrounding buffers.Using full point area data, create buffer 1000 m surrounding point create plot boundaries spatial polygons, points, surrounding buffers.Using full point area data, calculate number incidents occur within polygon using \\(st\\_contains()\\) function.Using full point area data, calculate number incidents occur within polygon using \\(st\\_contains()\\) function.Using full point area data, calculate number incidents occurred within 1000 m distance point data.Using full point area data, calculate number incidents occurred within 1000 m distance point data.","code":"\n#Create a vector that calculates the minimum distance to green space for each census block\n#Use the apply function that does row or column wise calculations, i.e., instead of doing every row separately. \n#?apply\nmin.dist <- as.vector(apply(distances, 1, min))\n#Create indicator if there is a green space location within 1 mile (T or F)\nblocks_sf$access <- min.dist < 1 #This statement says \"is the min distance less than 1, yes or no?\"\nblocks_sf$access[1:3]## [1] FALSE  TRUE  TRUE\nlibrary(tmap)\n# View(blocks_sf)\n\ntm_shape(blocks_sf) +\ntm_polygons(\"access\") +\n  tm_shape(places_sf) +\n  tm_dots(col = \"red\", size = 0.3, alpha = 0.8)\n# extract the ethnicity data from the blocks variable\nhead(data.frame(blocks[1:3,14:18]))##     P_WHITE  P_BLACK P_AMERI_ES P_ASIAN_PI  P_OTHER\n## 0  7.095159 87.02003   0.584307   0.041736 5.258765\n## 1 87.105177 10.45262   0.195376   0.521003 1.725822\n## 2 32.931727 66.26506   0.100402   0.200803 0.502008\n#Create a matrix of proportions of each ethnic group\nethnicity <- as.matrix(data.frame(blocks[,14:18])/100)[,1:5]\n\n# Multiple proportion by the population to get the number within each group using colimn-wise apply() function.\nethnicity <- apply(ethnicity, 2, function(x)(x * blocks_sf$POP1990))\n\n\n#Create a matrix of counts by group\nethnicity <- data.frame(matrix(as.integer(ethnicity), ncol = 5))\ncolnames(ethnicity) <- c(\"White\", \"Black\",\n\"Native American\", \"Asian\", \"Other\")\n\nethnicity$access <- blocks$access\n\nhead(ethnicity)##   White Black Native American Asian Other\n## 1   170  2084              13     0   126\n## 2  2674   320               5    16    52\n## 3   328   659               1     1     4\n## 4   153  1142               6     6    26\n## 5   672   223               3    12     3\n## 6  1156    97               9    11    41\nindices <- sample(seq(1,50), size = 5, replace = F)"},{"path":"introduction-to-raster-in-r.html","id":"introduction-to-raster-in-r","chapter":"Module 5 Introduction to Raster in R","heading":"Module 5 Introduction to Raster in R","text":"","code":""},{"path":"introduction-to-raster-in-r.html","id":"what-are-we-doing-today","chapter":"Module 5 Introduction to Raster in R","heading":"5.1 What are we doing today:","text":"tutorial, review fundamental principles, packages metadata/raster attributes needed work raster data R. discuss three core metadata elements need understand work rasters R: CRS, extent resolution. also explores missing bad data values stored raster R handles elements. Finally, introduces GeoTiff file format.","code":""},{"path":"introduction-to-raster-in-r.html","id":"learning-objectives","chapter":"Module 5 Introduction to Raster in R","heading":"5.2 Learning Objectives","text":"Understand raster dataset fundamental attributes.Understand raster dataset fundamental attributes.Know explore raster attributes R.Know explore raster attributes R.able import rasters R using raster package.able import rasters R using raster package.able quickly plot raster file R.able quickly plot raster file R.Understand difference single- multi-band rasters.Understand difference single- multi-band rasters.","code":""},{"path":"introduction-to-raster-in-r.html","id":"things-youll-need-to-complete-this-tutorial","chapter":"Module 5 Introduction to Raster in R","heading":"5.3 Things You’ll Need To Complete This Tutorial","text":"","code":""},{"path":"introduction-to-raster-in-r.html","id":"install-r-packages","chapter":"Module 5 Introduction to Raster in R","heading":"5.3.1 Install R Packages","text":"raster: install.packages(“raster”)rgdal: install.packages(“rgdal”)","code":""},{"path":"introduction-to-raster-in-r.html","id":"download-data","chapter":"Module 5 Introduction to Raster in R","heading":"5.3.2 Download Data","text":"NEON TEACHING DATA SUBSET: AIRBORNE REMOTE SENSING DATAThe LiDAR imagery data used create raster teaching data subset collected National Ecological Observatory Network’s Harvard Forest San Joaquin Experimental Range field sites processed NEON headquarters. entire dataset can accessed request NEON Data Portal.","code":""},{"path":"introduction-to-raster-in-r.html","id":"about-raster-data","chapter":"Module 5 Introduction to Raster in R","heading":"5.4 About Raster Data","text":"Raster “gridded” data stored grid values rendered map pixels. pixel value represents area Earth’s surface.","code":""},{"path":"introduction-to-raster-in-r.html","id":"raster-data-in-r","chapter":"Module 5 Introduction to Raster in R","heading":"5.5 Raster Data in R","text":"Let’s first import raster dataset R explore metadata. open rasters R, use raster rgdal packages.","code":"\n# load libraries\nlibrary(raster)\nlibrary(rgdal)"},{"path":"introduction-to-raster-in-r.html","id":"open-a-raster-in-r","chapter":"Module 5 Introduction to Raster in R","heading":"5.6 Open a Raster in R","text":"can use raster(\"path--raster-\") function open raster R.Data Tip: OBJECT NAMES! improve code readability, file object names used make clear file. data tutorial collected Harvard Forest ’ll use naming convention `datatype_HARV`.","code":"\n# Load raster into R\nDSM_HARV <- raster(\"images/HARV/DSM/HARV_dsmCrop.tif\")\n\n# View raster structure\nDSM_HARV "},{"path":"introduction-to-raster-in-r.html","id":"types-of-data-stored-in-raster-format","chapter":"Module 5 Introduction to Raster in R","heading":"5.7 Types of Data Stored in Raster Format","text":"Raster data can continuous categorical. Continuous rasters can range quantitative values. examples continuous rasters include:Precipitation maps.Precipitation maps.Maps tree height derived LiDAR data.Maps tree height derived LiDAR data.Elevation values region.Elevation values region.raster loaded plotted earlier digital surface model, map elevation Harvard Forest derived NEON AOP LiDAR sensor.Elevation represented continuous numeric variable map. legend shows continuous range values data around 320 400 meters.rasters contain categorical data pixel represents discrete class landcover type (e.g., “forest” “grassland”) rather continuous value elevation temperature. examples classified maps include:Landcover/land-use maps.Landcover/land-use maps.Tree height maps classified short, medium, tall trees.Tree height maps classified short, medium, tall trees.Elevation maps classified low, medium high elevation.Elevation maps classified low, medium high elevation.Map United States showing landcover categorical data. color different landcover category. Source: Multi-Resolution Land Characteristics Consortium, USGS","code":"\n# render DSM for tutorial content background\nDSM_HARV <- raster(\"images/HARV/DSM/HARV_dsmCrop.tif\")\n\n# code output here - DEM rendered on the screen\nplot(DSM_HARV, main=\"Continuous Elevation Map\\n NEON Harvard Forest Field Site\")"},{"path":"introduction-to-raster-in-r.html","id":"categorical-elevation-map-of-the-neon-harvard-forest-site","chapter":"Module 5 Introduction to Raster in R","heading":"5.7.0.1 Categorical Elevation Map of the NEON Harvard Forest Site","text":"legend map shows colors representing discrete class.","code":"\n# Demonstration image for the tutorial\nDSM_HARV <- raster(\"images/HARV/DSM/HARV_dsmCrop.tif\")\n\n# add a color map with 5 colors\ncol=terrain.colors(3)\n# add breaks to the colormap (4 breaks = 3 segments)\nbrk <- c(250,350, 380,500)\n\n# Expand right side of clipping rect to make room for the legend\npar(xpd = FALSE,mar=c(5.1, 4.1, 4.1, 4.5))\n# DEM with a custom legend\nplot(DSM_HARV, \n    col=col, \n    breaks=brk, \n    main=\"Classified Elevation Map\\nNEON Harvard Forest Field Site\",\n    legend = FALSE\n    )\n\n# turn xpd back on to force the legend to fit next to the plot.\npar(xpd = TRUE)\n# add a legend - but make it appear outside of the plot\nlegend( par()$usr[2], 4713700,\n        legend = c(\"High Elevation\", \"Middle\",\"Low Elevation\"), \n        fill = rev(col))"},{"path":"introduction-to-raster-in-r.html","id":"what-is-a-geotiff","chapter":"Module 5 Introduction to Raster in R","heading":"5.8 What is a GeoTIFF??","text":"Raster data can come many different formats. tutorial, use geotiff format extension .tif. .tif file stores metadata attributes file embedded tif tags. instance, camera might store tag describes make model camera date photo taken saves .tif. GeoTIFF standard .tif image format additional spatial (georeferencing) information embedded file tags. tags can include following raster metadata:Coordinate Reference System (CRS)Coordinate Reference System (CRS)Spatial Extent (extent)Spatial Extent (extent)Values represent missing data (NoDataValue)Values represent missing data (NoDataValue)resolution dataThe resolution dataIn tutorial discuss metadata tags.","code":""},{"path":"introduction-to-raster-in-r.html","id":"coordinate-reference-system","chapter":"Module 5 Introduction to Raster in R","heading":"5.9 Coordinate Reference System","text":"Coordinate Reference System CRS tells R raster located geographic space. also tells R method used “flatten” project raster geographic space.Maps United States different projections. Notice differences shape associated different projection. differences direct result calculations used “flatten” data onto 2-dimensional map. Source: M. Corey, opennews.org","code":""},{"path":"introduction-to-raster-in-r.html","id":"what-makes-spatial-data-line-up-on-a-map","chapter":"Module 5 Introduction to Raster in R","heading":"5.10 What Makes Spatial Data Line Up On A Map?","text":"lots great resources describe coordinate reference systems projections greater detail (read , ). purposes activity, important understand data location saved different projections line GIS program. Thus, ’s important working spatial data program like R identify coordinate reference system applied data retain throughout data processing analysis.","code":""},{"path":"introduction-to-raster-in-r.html","id":"view-raster-coordinate-reference-system-crs-in-r","chapter":"Module 5 Introduction to Raster in R","heading":"5.11 View Raster Coordinate Reference System (CRS) in R","text":"can view CRS string associated R object using thecrs() method. can assign string R object, .CRS DSM_HARV object tells us data UTM projection.CRS case PROJ format. means projection information strung together series text elements, begins + sign.+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0We’ll focus first components CRS tutorial.+proj=utm projection dataset. data Universal Transverse Mercator (UTM).+proj=utm projection dataset. data Universal Transverse Mercator (UTM).+zone=18 UTM projection divides world zones, element tells zone data . Harvard Forest Zone 18.+zone=18 UTM projection divides world zones, element tells zone data . Harvard Forest Zone 18.+datum=WGS84 datum used define center point projection. raster uses WGS84 datum.+datum=WGS84 datum used define center point projection. raster uses WGS84 datum.+units=m horizontal units data . units meters.+units=m horizontal units data . units meters.","code":"\nDSM_HARV <- raster(\"images/HARV/DSM/HARV_dsmCrop.tif\")\n\n# view resolution units\ncrs(DSM_HARV)Coordinate Reference System:\nDeprecated Proj.4 representation:\n +proj=utm +zone=18 +datum=WGS84 +units=m +no_defs \nWKT2 2019 representation:\nPROJCRS[\"WGS 84 / UTM zone 18N\",\n    BASEGEOGCRS[\"WGS 84\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 18N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",-75,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 78°W and 72°W, northern hemisphere between equator and 84°N, onshore and offshore. Bahamas. Canada - Nunavut; Ontario; Quebec. Colombia. Cuba. Ecuador. Greenland. Haiti. Jamica. Panama. Turks and Caicos Islands. United States (USA). Venezuela.\"],\n        BBOX[0,-78,84,-72]],\n    ID[\"EPSG\",32618]] \n# assign crs to an object (class) to use for reprojection and other tasks\nmyCRS <- crs(DSM_HARV)\nmyCRSCoordinate Reference System:\nDeprecated Proj.4 representation:\n +proj=utm +zone=18 +datum=WGS84 +units=m +no_defs \nWKT2 2019 representation:\nPROJCRS[\"WGS 84 / UTM zone 18N\",\n    BASEGEOGCRS[\"WGS 84\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 18N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",-75,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 78°W and 72°W, northern hemisphere between equator and 84°N, onshore and offshore. Bahamas. Canada - Nunavut; Ontario; Quebec. Colombia. Cuba. Ecuador. Greenland. Haiti. Jamica. Panama. Turks and Caicos Islands. United States (USA). Venezuela.\"],\n        BBOX[0,-78,84,-72]],\n    ID[\"EPSG\",32618]] "},{"path":"introduction-to-raster-in-r.html","id":"extent","chapter":"Module 5 Introduction to Raster in R","heading":"5.12 Extent","text":"spatial extent R spatial object represents geographic “edge” location furthest north, south, east west. words, extent represents overall geographic coverage spatial object.","code":""},{"path":"introduction-to-raster-in-r.html","id":"resolution","chapter":"Module 5 Introduction to Raster in R","heading":"5.13 Resolution","text":"raster horizontal (x y) resolution. resolution represents area ground pixel covers. units data meters. Given data resolution 1 x 1, means pixel represents 1 x 1 meter area ground.best way view resolution units look coordinate reference system string crs(). Notice data contains: +units=m.","code":"\nDSM_HARV <- raster(\"images/HARV/DSM/HARV_dsmCrop.tif\")\n\ncrs(DSM_HARV)Coordinate Reference System:\nDeprecated Proj.4 representation:\n +proj=utm +zone=18 +datum=WGS84 +units=m +no_defs \nWKT2 2019 representation:\nPROJCRS[\"WGS 84 / UTM zone 18N\",\n    BASEGEOGCRS[\"WGS 84\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 18N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",-75,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 78°W and 72°W, northern hemisphere between equator and 84°N, onshore and offshore. Bahamas. Canada - Nunavut; Ontario; Quebec. Colombia. Cuba. Ecuador. Greenland. Haiti. Jamica. Panama. Turks and Caicos Islands. United States (USA). Venezuela.\"],\n        BBOX[0,-78,84,-72]],\n    ID[\"EPSG\",32618]] "},{"path":"introduction-to-raster-in-r.html","id":"calculate-raster-min-and-max-values","chapter":"Module 5 Introduction to Raster in R","heading":"5.14 Calculate Raster Min and Max Values","text":"useful know minimum maximum values raster dataset. case, given working elevation data, values represent min/max elevation range site.Raster statistics often calculated embedded geotiff us. However weren’t already calculated, can calculate using setMinMax() function.can see elevation site ranges 305.07m 416.07m.","code":"\nDSM_HARV <- raster(\"images/HARV/DSM/HARV_dsmCrop.tif\")\n\n# This is the code if min/max weren't calculated: \n# DSM_HARV <- setMinMax(DSM_HARV) \n\n# view the calculated min value\nminValue(DSM_HARV)[1] 305.07\n# view only max value\nmaxValue(DSM_HARV)[1] 416.07"},{"path":"introduction-to-raster-in-r.html","id":"nodata-values-in-rasters","chapter":"Module 5 Introduction to Raster in R","heading":"5.15 NoData Values in Rasters","text":"Raster data often NoDataValue associated . value assigned pixels data missing data collected.default shape raster always square rectangular. dataset shape isn’t square rectangular, pixels edge raster NoDataValues. often happens data collected airplane flew part defined region.image , pixels black NoDataValues. camera collect data areas.next image, black edges assigned NoDataValue. R doesn’t render pixels contain specified NoDataValue. R assigns missing data NoDataValue NA.assigned NoDataValue varies across disciplines; -9999 common value used remote sensing field atmospheric fields. also standard used National Ecological Observatory Network (NEON).lucky, GeoTIFF file tag tells us NoDataValue. less lucky, can find information raster’s metadata. NoDataValue stored GeoTIFF tag, R opens raster, assign instance value NA. Values NA ignored R demonstrated .","code":"\n# no data demonstration code - not being taught \n# Use stack function to read in all bands\nRGB_stack <- stack(\"images/HARV/RGB_Imagery/HARV_RGB_Ortho.tif\")\n\n# Create an RGB image from the raster stack\npar(col.axis=\"white\",col.lab=\"white\",tck=0)\nplotRGB(RGB_stack, r = 1, g = 2, b = 3, \n        axes=TRUE, main=\"Raster With NoData Values\\nRendered in Black\")\n# reassign cells with 0,0,0 to NA\n# this is simply demonstration code - we will not teach this.\nfunc <- function(x) {\n  x[rowSums(x == 0) == 3, ] <- NA\n  x}\n\nRGB_stack <- stack(\"images/HARV/RGB_Imagery/HARV_RGB_Ortho.tif\")\n\nnewRGBImage <- calc(RGB_stack, func)\n\n\npar(col.axis=\"white\",col.lab=\"white\",tck=0)\n# Create an RGB image from the raster stack\nplotRGB(newRGBImage, r = 1, g = 2, b = 3,\n        axes=TRUE, main=\"Raster With No Data Values\\nNoDataValue= NA\")"},{"path":"introduction-to-raster-in-r.html","id":"bad-data-values-in-rasters","chapter":"Module 5 Introduction to Raster in R","heading":"5.16 Bad Data Values in Rasters","text":"Bad data values different NoDataValues. Bad data values values fall outside applicable range dataset.Examples Bad Data Values:normalized difference vegetation index (NDVI), measure greenness, valid range -1 1. value outside range considered “bad” miscalculated value.normalized difference vegetation index (NDVI), measure greenness, valid range -1 1. value outside range considered “bad” miscalculated value.Reflectance data image often range 0-1 0-10,000 depending upon data scaled. Thus value greater 1 greater 10,000 likely caused error either data collection processing.Reflectance data image often range 0-1 0-10,000 depending upon data scaled. Thus value greater 1 greater 10,000 likely caused error either data collection processing.","code":""},{"path":"introduction-to-raster-in-r.html","id":"find-bad-data-values","chapter":"Module 5 Introduction to Raster in R","heading":"5.16.1 Find Bad Data Values","text":"Sometimes raster’s metadata tell us range expected values raster. Values outside range suspect need consider analyze data. Sometimes, need use common sense scientific insight examine data - just field data identify questionable values.","code":""},{"path":"introduction-to-raster-in-r.html","id":"create-a-histogram-of-raster-values","chapter":"Module 5 Introduction to Raster in R","heading":"5.17 Create A Histogram of Raster Values","text":"can explore distribution values contained within raster using hist() function produces histogram. Histograms often useful identifying outliers bad data values raster data.","code":"\nDSM_HARV <- raster(\"images/HARV/DSM/HARV_dsmCrop.tif\")\n\n# View the total number of pixels (cells) in is our raster \nncell(DSM_HARV)[1] 2319799\n# create histogram that includes with all pixel values in the raster\nhist(DSM_HARV, \n     maxpixels=ncell(DSM_HARV),\n     main=\"Distribution of DSM Values\\n All Pixel Values Included\\n NEON Harvard Forest Field Site\",\n     xlab=\"DSM Elevation Value (m)\",\n     ylab=\"Frequency\",\n     col=\"wheat4\")"},{"path":"introduction-to-raster-in-r.html","id":"raster-bands","chapter":"Module 5 Introduction to Raster in R","heading":"5.18 Raster Bands","text":"Digital Surface Model object (DSM_HARV) ’ve working single band raster. means one dataset stored raster: surface elevation meters one time period.raster dataset can contain one bands. can use raster() function import one single band single multi-band raster. can view number bands raster using nlayers() function.However, raster data can also multi-band meaning one raster file contains data one variable time period cell. default raster() function imports first band raster regardless whether one bands.","code":"\nDSM_HARV <- raster(\"images/HARV/DSM/HARV_dsmCrop.tif\")\n\n\n# view number of bands\nnlayers(DSM_HARV)[1] 1"},{"path":"introduction-to-raster-in-r.html","id":"view-raster-file-attributes","chapter":"Module 5 Introduction to Raster in R","heading":"5.19 View Raster File Attributes","text":"Remember GeoTIFF contains set embedded tags contain metadata raster. far, ’ve explored raster metadata importing R. However, can use GDALinfo(\"path--raster-\") function view raster metadata open file R.Notice things output:projection described using string proj4 format : +proj=utm +zone=18 +datum=WGS84 +units=m +no_defsA projection described using string proj4 format : +proj=utm +zone=18 +datum=WGS84 +units=m +no_defsWe can identify NoDataValue: -9999We can identify NoDataValue: -9999We can tell many bands file contains: 1We can tell many bands file contains: 1We can view x y resolution data: 1We can view x y resolution data: 1We can see min max values data: Bmin Bmax.can see min max values data: Bmin Bmax.ideal use GDALinfo explore file reading R.","code":"\n# view attributes before opening file\nGDALinfo(\"images/HARV/DSM/HARV_dsmCrop.tif\")rows        1367 \ncolumns     1697 \nbands       1 \nlower left origin.x        731453 \nlower left origin.y        4712471 \nres.x       1 \nres.y       1 \nysign       -1 \noblique.x   0 \noblique.y   0 \ndriver      GTiff \nprojection  +proj=utm +zone=18 +datum=WGS84 +units=m +no_defs \nfile        images/HARV/DSM/HARV_dsmCrop.tif \napparent band summary:\n   GDType hasNoDataValue NoDataValue blockSize1 blockSize2\n1 Float64           TRUE       -9999          1       1697\napparent band statistics:\n    Bmin   Bmax    Bmean      Bsd\n1 305.07 416.07 359.8531 17.83169\nMetadata:\nAREA_OR_POINT=Area "},{"path":"introduction-to-kernel-density-estimation.html","id":"introduction-to-kernel-density-estimation","chapter":"Module 6 Introduction to Kernel Density Estimation","heading":"Module 6 Introduction to Kernel Density Estimation","text":"Motivations statistical analysesTo explore visualize data.create calibrate models process generating data.test hypotheses related processes generating data.kinds analysis related spatial data distinctive, .e.\ndetection location clusters events.\nspatial distributions events\nspatial autocorrelation\nneighbors correlated?\ndetection location clusters events.spatial distributions eventsspatial autocorrelationAre neighbors correlated?","code":""},{"path":"introduction-to-kernel-density-estimation.html","id":"point-patterns","chapter":"Module 6 Introduction to Kernel Density Estimation","heading":"6.1 Point Patterns","text":"Collections geographical points (.e. breaches) assumed generated random process.Collections geographical points (.e. breaches) assumed generated random process.Consists set observed \\((x,y)\\) coordinates.Consists set observed \\((x,y)\\) coordinates.want assess locations points related (.e. points refer locations cases contagious disease, likely occur near therefore independent.)want assess locations points related (.e. points refer locations cases contagious disease, likely occur near therefore independent.)Can say something population based finite set data?Can say something population based finite set data?","code":""},{"path":"introduction-to-kernel-density-estimation.html","id":"surfaces-showing-where-events-are-more-likely-to-happen","chapter":"Module 6 Introduction to Kernel Density Estimation","heading":"6.2 Surfaces showing where events are more likely to happen","text":"probability density function (PDF) function gives probability (likelihood) event occurring location space.probability density function (PDF) function gives probability (likelihood) event occurring location space.Gives surface across space showing events likely happen.Gives surface across space showing events likely happen.Displayed raster image: Fine grid colors colors correspond density intensity events.\nDensity: probability event occurring location \\(s\\).\nIntensity: expected number events occurring location \\(s\\).\nNote: Intensity \\(=\\) number events across locations \\(\\times\\) Density.\nDisplayed raster image: Fine grid colors colors correspond density intensity events.Density: probability event occurring location \\(s\\).Intensity: expected number events occurring location \\(s\\).Note: Intensity \\(=\\) number events across locations \\(\\times\\) Density.","code":""},{"path":"introduction-to-kernel-density-estimation.html","id":"kernel-density-estimation-kde","chapter":"Module 6 Introduction to Kernel Density Estimation","heading":"6.3 Kernel Density Estimation (KDE)","text":"Let \\(f(x)\\) denote intensity function (expected number cases per unit distance location \\(s\\)).Let \\(f(x)\\) denote intensity function (expected number cases per unit distance location \\(s\\)).estimate \\(f(x)\\) via kernel estimation. mean?\nPlace small “kernel” observed data point.\nSpreads observation around usually something looks like normal distribution.\n\nSum kernel values give intensity estimate location \\(s\\).\nKDE averages series small “bumps” (2 dim probability distributions) centered observed point.\nestimate \\(f(x)\\) via kernel estimation. mean?Place small “kernel” observed data point.\nSpreads observation around usually something looks like normal distribution.\nSpreads observation around usually something looks like normal distribution.Sum kernel values give intensity estimate location \\(s\\).KDE averages series small “bumps” (2 dim probability distributions) centered observed point.Figure: initial points (left), bump centered point (middle), average bumps giving estimate probability density (right)Figure: initial points (left), bump centered point (middle), average bumps giving estimate probability density (right)","code":""},{"path":"introduction-to-kernel-density-estimation.html","id":"section","chapter":"Module 6 Introduction to Kernel Density Estimation","heading":"6.4 ","text":"algebraic terms, approximation \\(f(\\mathbf{x})\\) given location \\(\\mathbf{x} = (x,y)\\) given : \\[\\hat{f}(x) = \\hat{f}(x,y) = \\frac{1}{n \\cdot b_x \\cdot b_y} \\sum_i k\\left(\\frac{x-x_i}{b_x}, \\frac{y-y_i}{b_y}\\right)\\]Kernel Function: \\(k\\left(\\frac{x-x_i}{b_x}, \\frac{y-y_i}{b_y}\\right)\\) creates bumps. Must non-negative function.\\(=\\) location index.entire equation describes “bump averaging process”.\\(b=\\) Bandwidth\n- Related variance kernel (wide ?)\n- much spread observation?\n- Controls smoothness density estimate (Larger \\(b\\) gives smoother surface)\n- \\(b_y, b_x\\) refer bandwidths control much want smooth probability density surface. Lower values \\(b's\\) give spiky distributions high values flatten distribution.Figure: small \\(b's\\) (left). appropriate \\(b's\\) (middle), high (right)","code":""},{"path":"introduction-to-kernel-density-estimation.html","id":"how-to-choose-bandwidth","chapter":"Module 6 Introduction to Kernel Density Estimation","heading":"6.5 How to choose bandwidth","text":"One obvious question choose bandwidth given dataset \\(\\mathbf{x}_i\\).general rule thumb: \\[b_x = s_x \\left(\\frac{2}{3n}\\right) ^{1/6}\\] \\[b_y = s_y \\left(\\frac{2}{3n}\\right) ^{1/6}\\]\\(s_x, s_y\\) standard deviation \\(x_i\\) \\(y_i\\).","code":""},{"path":"introduction-to-kernel-density-estimation.html","id":"lets-look-again-at-the-breach-data","chapter":"Module 6 Introduction to Kernel Density Estimation","heading":"6.6 Let’s look again at the Breach data…","text":"(First need install package Github using code )Steps estimate KDE:\n1. Take blue point.\n2. Create small distribution (bump) around point, usually normal distn.\n3. Average across bumps calculate KDE.","code":"\n # install.packages(\"remotes\")\n remotes::install_github(\"mtennekes/oldtmaptools\")\nlibrary(tidyverse)\nlibrary(GISTools)\nlibrary(sp)\nlibrary(rgeos)\nlibrary(tmap)\nlibrary(oldtmaptools)\n\n# Get the data\ndata(newhaven)\n# look at it\n# select 'view' mode\ntmap_mode('view')\ntmap_options(check.and.fix = TRUE)\n# Create the map of blocks and incidents\ntm_shape(blocks) + \n  tm_borders() + \n  tm_shape(breach) +\n  tm_dots(col='navyblue')"},{"path":"introduction-to-kernel-density-estimation.html","id":"how-to-calculate-kdes","chapter":"Module 6 Introduction to Kernel Density Estimation","heading":"6.7 How to calculate KDEs","text":"function compute KDE map_smooth oldtmaptools packages.estimates value density grid points, returns list following elements:\nraster object: raster grid values KDEs\ncontour object: set contour lines\npolygon object: list polygons\nraster object: raster grid values KDEsa contour object: set contour linesa polygon object: list polygonsLet’s look createdPlot KDE outcomes raster form.Note count caption indicates probability densities rescaled represent intensities- multiplying KDE number cases.Plot KDE outcomes using contour lines.Try plotting KDE outcomes using polygons","code":"\n# Function to choose bandwidth according Bowman and Azzalini / Scott's rule\n# for use with <smooth_map> in <tmaptools>\n\nchoose_bw <- function(spdf) {\n  X <- coordinates(spdf)\n  sigma <- c(sd(X[,1]),sd(X[,2]))  * (2 / (3 * nrow(X))) ^ (1/6)\n  return(sigma/1000)\n}\n#Calculate KDE\n  # bandwith argument: vector of length 2\n  # cover argument: geometric object containing the boundaries of locations to estimate KDE.\n  #smooth_map expects bandwidth in kms, so we divide by 1000 in our bw function.\n\nbreach_dens <- smooth_map(breach,cover=blocks, bandwidth = choose_bw(breach))\nbreach_dens$raster\nbreach_dens$iso\nbreach_dens$polygons\n#Plot the KDE\nlibrary(sf)\n\nbreach_sf <- st_as_sf(breach)\n# Number plotted is expected number of cases per unit area\ntm_shape(breach_dens$raster) + tm_raster() + tm_shape(breach_sf) + tm_dots(col=\"blue\")\ntmap_mode('view')\ntmap_options(check.and.fix = TRUE)\n# Create the map of blocks and incidents\ntm_shape(blocks) + \n  tm_borders(alpha = 0.5) + \n  tm_shape(breach_dens$iso) +\n  tm_lines(col=\"darkred\", lwd = 2)\n#Add your code here\ntmap_mode('view')\ntmap_options(check.and.fix = TRUE)\n# Create the map of blocks and incidents\ntm_shape(blocks) + \n  tm_borders(alpha = 0.5) + \n  tm_shape(breach_dens$polygons) +\n  tm_fill(col=\"level\")"},{"path":"introduction-to-kernel-density-estimation.html","id":"using-kde-for-comparisons","chapter":"Module 6 Introduction to Kernel Density Estimation","heading":"6.8 Using KDE for comparisons","text":"can use KDE compare spatial distributions across groups.newhaven data data relating (1) break-ins using forced entry, (2) break-ins .may interested comparing spatial distribution two groups across area.Important: compare spatial distributions, need specify set levels intensity contours equal.","code":""},{"path":"introduction-to-kernel-density-estimation.html","id":"operations-for-comparing-kde","chapter":"Module 6 Introduction to Kernel Density Estimation","heading":"6.8.1 Operations for comparing KDE","text":"Specify set level intensity contours allow comparisons.Compute KDE.Draw two mapsUse tmap_arrange() draw multiple maps.","code":"\n# set contour levels\ncontours <- seq(0, 1.4, by = 0.2)\n\n#calculate KDEs for both groups\nbrn_dens <- smooth_map(burgres.n, cover = blocks, breaks = contours, style = \"fixed\", bandwidth = choose_bw(burgres.n))\n\nbrf_dens <- smooth_map(burgres.f, cover = blocks, breaks = contours, style = \"fixed\", bandwidth = choose_bw(burgres.f))\n\n#Create the maps and store them in variables\ndn <- tm_shape(blocks) + tm_borders() + tm_shape(brn_dens$polygons) + tm_fill(col = \"level\", alpha = 0.8, title = \"non-forced break-ins\")\ndf <- tm_shape(blocks) + tm_borders() + tm_shape(brf_dens$polygons) + tm_fill(col = \"level\", alpha = 0.8, title = \"forced break-ins\") \n\ntmap_arrange(dn, df)"}]
